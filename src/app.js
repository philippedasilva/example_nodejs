// Generated by CoffeeScript 1.10.0
(function() {
  var app, express, jade, metrics, users;

  express = require('express');

  jade = require('jade');

  metrics = require('./metrics');

  users = require('./users');


  /*
  app.use session
     secret: 'Sec'
     store: new LevelStore './db/sessions'
     resave:true
     saveUnintialized:true
   */


  /*
  router = express.Router()
  router.get '/users', (req,res) ->
  app.use '/api',router
   */

  app = express();

  app.set('port', 1889);

  app.set('views', __dirname + "/../views");

  app.set('view engine', 'jade');

  app.use('/', express["static"](__dirname + "/../public"));


  /*
  app.use stylus.static(
     src: "#{__dirname}/../public"
     compress: true
  )
   */


  /*
  app.use stylus.middleware(
    src: __dirname + '/../public'
    dest: __dirname + '/../public'
    debug: true
    force: true)
   */


  /*
  app.use require('body-parser')()
  
  app.get '/',(req,res) ->
   res.render 'index',
    locals:
      title: 'Test Page'
  app.get 'metrics.xml', (req,res) ->
  
  app.get 'metrics.json', (req,res) ->
    res.json metrics.get()
   */

  app.use(require('body-parser')());


  /*
  authCheck = (req,res,next) ->
    unless req.session.loggedIn == true
    res.redirect '/login'
    else
      next()
  
  
  app.get '/',authCheck,(req,res) ->
    res.render 'index', name:req.session.username
   */

  app.get('/', function(req, res) {
    return res.render('index');
  });

  app.get('/metrics.json', function(req, res) {
    return metrics.get(1, function(err, data) {
      return res.status(200).json(data[0]);
    });
  });

  app.get('/users.json', function(req, res) {
    return users.get("rooter", function(err, data) {
      if (err) {
        throw err;
      }
      return res.status(200).json(data);
    });
  });

  app.get('/user', function(req, res) {
    return res.render('user');
  });

  app.post('/metric/save.json', function(req, res) {
    var met;
    met = [
      {
        timestamp: req.body.timestamp,
        value: req.body.value
      }
    ];
    return metrics.save(req.body.id, met, function(err) {
      if (err) {
        return res.status(500).json(err);
      } else {
        return res.status(200).send("Metrics saved");
      }
    });
  });

  app.post('/login', function(req, res) {
    var password, username;
    username = req.body.login;
    password = req.body.password;
    return users.get(username, function(err, data) {
      if (err) {
        return res.status(200).send("Authentifacation failed (username introuvable en bdd)");
      } else {
        if (data.password === password) {
          return res.status(200).send("Authentifacation r√©ussie");
        } else {
          return res.status(200).send("Authentifacation failed (password incorrect)");
        }
      }
    });
  });

  app.post('/inscrire', function(req, res) {
    return users.save(req.body.username_inscrire, req.body.password_inscrire, req.body.name_inscrire, req.body.email_inscrire, function(err) {
      if (err) {
        return res.status(500).json(err);
      } else {
        return res.redirect('/user');
      }
    });
  });

  app.listen(app.get('port'), function(req, res) {
    return console.log("Server started");
  });


  /* TO USE NODEMON on Windows
    node ./node_modules/nodemon/bin/nodemon
   */

}).call(this);
