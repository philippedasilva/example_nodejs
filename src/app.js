// Generated by CoffeeScript 1.10.0
(function() {
  var LevelStore, app, authCheckHome, authCheckUser, express, jade, metrics, session, users;

  express = require('express');

  jade = require('jade');

  metrics = require('./metrics');

  users = require('./users');

  session = require('express-session');

  LevelStore = require('level-session-store')(session);

  app = express();

  app.set('port', 1889);

  app.set('views', __dirname + "/../views");

  app.set('view engine', 'jade');

  app.use('/', express["static"](__dirname + "/../public"));


  /*
  app.use stylus.static
    src: "#{__dirname}/../public/css"
    compress: true
   */

  app.use(session({
    secret: 'Sec',
    store: new LevelStore('./db/sessions'),
    resave: true,
    saveUnintialized: true
  }));


  /*
  app.use morgan 'dev'
  
  app.get '/myroute',middleware, (req,res) ->
    #route logic
  router = express.Router()
  router.get '/users', (req,res) ->
  app.use '/api',router
   */


  /*
  app.use stylus.middleware(
    src: __dirname + '/../public'
    dest: __dirname + '/../public'
    debug: true
    force: true)
   */

  app.use(require('body-parser')());

  app.get('/', function(req, res) {
    return res.render('index');
  });

  app.get('/user', function(req, res) {
    return res.render('user');
  });

  authCheckUser = function(req, res, next) {
    if (req.session.loggedIn !== false) {
      return res.redirect('/');
    } else {
      return next();
    }
  };

  authCheckHome = function(req, res, next) {
    if (req.session.loggedIn !== true) {
      return res.redirect('/user');
    } else {
      return next();
    }
  };

  app.get('/user', authCheckUser, function(req, res) {
    return res.render('user', {
      name: req.session.username
    });
  });

  app.get('/', authCheckHome, function(req, res) {
    return res.render('index');
  });

  app.get('/metrics.json', function(req, res) {
    return metrics.get(1, function(err, data) {
      return res.status(200).json(data[0]);
    });
  });

  app.get('/users.json', function(req, res) {
    return users.get("root", function(err, data) {
      if (err) {
        throw err;
      }
      return res.status(200).json(data);
    });
  });

  app.post('/metric/save.json', function(req, res) {
    var met;
    met = [
      {
        timestamp: req.body.timestamp,
        value: req.body.value
      }
    ];
    return metrics.save(req.body.id, met, function(err) {
      if (err) {
        return res.status(500).json(err);
      } else {
        return res.status(200).send("Metrics saved");
      }
    });
  });

  app.post('/inscrire', function(req, res) {
    return users.save(req.body.username_inscrire, req.body.password_inscrire, req.body.name_inscrire, req.body.email_inscrire, function(err) {
      if (err) {
        return res.status(500).json(err);
      } else {
        req.session.loggedIn = true;
        req.session.username = req.body.username_inscrire;
        return res.redirect('/user');
      }
    });
  });

  app.post('/login', function(req, res) {
    var password, username;
    username = req.body.login;
    password = req.body.password;
    return users.get(username, function(err, data) {
      if (err) {
        res.status(200).send("Authentifacation failed (username introuvable en bdd)");
      }
      if (data.password !== password) {
        return res.redirect('/');
      } else {
        req.session.loggedIn = true;
        req.session.username = data.username;
        return res.redirect('/user');
      }
    });
  });

  app.post('/disconnect', function(req, res) {
    delete req.session.loggedIn;
    delete req.session.username;
    return res.redirect('/');
  });

  app.get('/session', function(req, res) {
    var logged, loguser;
    if (req.session.loggedIn === true) {
      logged = "LoggedIn = true";
    } else {
      logged = "LoggedOut = false";
    }
    loguser = req.session.username;
    return res.status(200).send(logged + '\n' + loguser);
  });

  app.listen(app.get('port'), function(req, res) {
    return console.log("Server started");
  });

}).call(this);
