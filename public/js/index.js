// Generated by CoffeeScript 1.10.0
(function() {
  $(document).ready(function() {
    $('#inscrire').hide();
    $('#login').hide();
    $("#bloc_metrics").hide();
    $('#save').hide();
    $.getJSON('/username.json', function(data) {
      return $('#username').html(data);
    });
    $('#btn_inscrire').click(function() {
      $('#login').hide();
      return $('#inscrire').toggle();
    });
    $('#btn_login').click(function() {
      $('#inscrire').hide();
      return $('#login').toggle();
    });
    $('#save-metrics').click(function() {
      return $('#save').toggle();
    });
    return $('#get-metrics').click(function() {
      return $.getJSON('/metricsbyuser.json', function(data) {
        var barPadding, dataset, entete, h, i, j, len, metric, svg, w;
        $('#tab-metrics').empty();
        $('#bloc_metrics svg').empty();
        entete = "<th>Timestamp</th>";
        entete += "<th>Value</th>";
        entete += "<th>Suppr</th>";
        $('#tab-metrics').append(entete);
        i = 0;
        dataset = [];
        for (j = 0, len = data.length; j < len; j++) {
          metric = data[j];
          dataset[i] = metric.value;
          $('#tab-metrics').append("<tr></tr>");
          $('#tab-metrics tr:eq(' + i + ')').append("<td>" + metric.timestamp + "</td>");
          $('#tab-metrics tr:eq(' + i + ')').append("<td>" + metric.value + "</td>");
          $('#tab-metrics tr:eq(' + i + ')').append("<td><button class='btn btn-danger btn_suppr' data-id='" + metric.id + "'>X</button></td>");
          i++;
        }
        w = 500;
        h = 100;
        barPadding = 1;
        svg = d3.select('#bloc_metrics svg');
        svg.selectAll("rect").data(dataset).enter().append("rect").attr("x", 0).attr("width", 20).attr("x", function(d, i) {
          return i * (w / 15 - barPadding);
        }).attr("height", function(d) {
          return d * 8;
        }).attr("y", function(d) {
          return h - d * 4;
        }).attr("fill", function(d) {
          return "rgb(0, " + (d * 10) + ",0)";
        });

        /*
        margin =
        top: 10
        right: 10
        bottom: 15
        left: 25
        width = 480 - (margin.left) - (margin.right)
        height = 250 - (margin.top) - (margin.bottom)
        #parseDate = d3.time.format('%d-%b-%y').parse
        x = d3.scale.linear().range([
          0
          width
        ])
        y = d3.scale.linear().range([
          height
          0
        ])
        xAxis = d3.svg.axis().scale(x).orient('bottom')
        yAxis = d3.svg.axis().scale(y).orient('left')
        line = d3.svg.line().x((m) ->
          x m.timestamp
        ).y((m) ->
          y m.value
        )
        svg = d3.select('body').append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')
        for metric in data
          x.domain d3.extent(metric, (m) ->
            m.timestamp
          )
          y.domain d3.extent(metric, (m) ->
            m.value
          )
        svg.append('g').attr('class', 'x axis').attr('transform', 'translate(0,' + height + ')').call xAxis
        svg.append('g').attr('class', 'y axis').call(yAxis).append('text').attr('transform', 'rotate(-90)').attr('y', 6).attr('dy', '.71em').style('text-anchor', 'end').text 'Price ($)'
        svg.append('path').datum(data).attr('class', 'line').attr 'd', line
        return
         */
        if (data.length > 0) {
          return $('#bloc_metrics').toggle();
        }
      });
    });
  });

}).call(this);
